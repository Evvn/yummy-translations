{"version":3,"sources":["SelectLanguage.js","TestDescriptions.js","App.js","serviceWorker.js","index.js"],"names":["SelectLanguage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","target","languages","list","_this2","radios","forEach","l","push","react_default","a","createElement","key","length","className","htmlFor","code","type","name","id","value","onClick","e","setLanguage","language","setState","_this3","listLanguages","preventDefault","onSetLang","React","Component","fetch","require","Airtable","configure","apiKey","process","endpointUrl","TestDescriptions","desc","descriptions","source","i","descs","toLang","text","url","concat","encodeURI","method","headers","Content-Type","Accept","then","res","json","response","translation","data","translations","translatedText","catch","error","console","log","rating","base","create","description","err","record","prevState","printTranslation","_this4","btnClick","role","aria-label","document","querySelector","remove","src","alt","href","App","numberOfDesc","ready","bind","assertThisInitialized","selectRandomDescriptions","index","findIndex","self","select","view","eachPage","records","fetchNextPage","get","selectRandom","num","randoms","rand","Math","floor","random","undefined","indexOf","noLanguage","classList","add","src_SelectLanguage","printLanguage","src_TestDescriptions","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.0d956177.chunk.js","sourcesContent":["import React from 'react'\n\nclass SelectLanguage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      target: '',\n      languages: this.props.languages,\n    }\n  }\n\n  listLanguages(list) {\n    let languages = list\n    let radios = []\n\n    languages.forEach((l) => {\n      radios.push(\n        <div key={ radios.length }>\n\n          <label className=\"language\" htmlFor={ l.code }>\n\n            <input\n              type=\"radio\"\n              name=\"language\"\n              id={ l.code }\n              value={ l.code }\n              onClick={ (e)=>{this.setLanguage(e.target.value)} } />\n\n              { l.language }\n              <span className=\"languageRadio\" />\n\n          </label>\n\n        </div>\n      )\n    })\n    return radios\n  }\n\n  setLanguage(code) {\n    this.setState({\n      target: code\n    }, () => {\n      // console.log(this.state.target)\n    })\n  }\n\n  render() {\n    return (\n      <div className='selectLanguage'>\n        { this.listLanguages(this.state.languages) }\n\n        <button onClick={ (e) => {\n            e.preventDefault()\n            this.props.onSetLang(this.state.target)\n          }\n         }>Next step!</button>\n      </div>\n    )\n  }\n}\n\nexport default SelectLanguage\n","import React from 'react'\nimport Airtable from 'airtable'\nconst fetch = require('node-fetch')\n\n// sneaky airtable api key in hidden environment variable\nlet API_KEY = process.env.REACT_APP_AIRTABLE_API_KEY\nAirtable.configure({apiKey: API_KEY, endpointUrl: 'https://api.airtable.com'})\n\nclass TestDescriptions extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      desc: '',\n      target: this.props.target,\n      descriptions: this.props.descriptions,\n      source: 'en',\n      i: 0\n    }\n\n    // this.translate = this.translate.bind(this)\n  }\n\n  printDescription() {\n    let descs = this.state.descriptions\n    let i = this.state.i\n\n    this.setState({\n      desc: descs[i]\n    }, () => {\n      return\n    })\n  }\n\n  printTranslation(desc) {\n    let fromLang = 'en'\n    let toLang = this.state.target\n    let text = desc\n\n    let API_KEY = process.env.REACT_APP_GOOGLE_API_KEY\n\n    let url = `https://translation.googleapis.com/language/translate/v2?key=${API_KEY}`;\n    url += '&q=' + encodeURI(text);\n    url += `&source=${fromLang}`;\n    url += `&target=${toLang}`;\n\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n    .then(res => res.json())\n    .then((response) => {\n      let translation = response.data.translations[0].translatedText\n      this.setState({\n        translation: translation\n      }, () => {\n        return\n      })\n    })\n    .catch(error => {\n      console.log(\"There was an error with the translation request: \", error);\n    });\n  }\n\n  btnClick(rating) {\n    console.log(rating);\n    console.log(this.state.target);\n    console.log(this.state.descriptions[this.state.i]);\n    console.log(this.state.translation);\n    let base = new Airtable({apiKey: API_KEY}).base('appi0N2QTGTlL5MEY');\n\n    base('ratings').create({\n      \"rating\": rating,\n      \"language\": this.state.target,\n      \"description\": this.state.descriptions[this.state.i],\n      \"translation\": this.state.translation\n    }, function(err, record) {\n        if (err) { console.error(err); return; }\n    });\n\n\n    this.setState(prevState => ({\n      i: this.state.i + 1,\n      translation: ''\n    }),() => {\n      this.printTranslation(this.state.descriptions[this.state.i])\n    })\n  }\n\n  componentWillMount() {\n    let desc = this.state.descriptions[this.state.i]\n    this.printTranslation(desc)\n  }\n\n  render() {\n    let desc = this.state.descriptions[this.state.i]\n\n    if (this.state.i < 10) {\n      return (\n        <div className='testDescriptions'>\n\n          <section className='descriptionEn'>\n            <h3>Before</h3>\n            <span>{ desc }</span>\n          </section>\n\n          <section className=\"descriptionTr\">\n            <h3>After</h3>\n            <span>{ this.state.translation }</span>\n          </section>\n\n          <button className=\"good\" onClick={ (e) => {\n              e.preventDefault()\n              this.btnClick('good')\n            }\n          }>Very helpful! <span className=\"emoji\" role=\"img\" aria-label=\"big-happy\">😁</span></button>\n\n          <button className=\"okay\" onClick={ (e) => {\n              e.preventDefault()\n              this.btnClick('okay')\n            }\n          }>Helpful <span className=\"emoji\" role=\"img\" aria-label=\"smile\">🙂</span></button>\n\n          <button className=\"bad\" onClick={ (e) => {\n              e.preventDefault()\n              this.btnClick('bad')\n            }\n          }>Not helpful <span className=\"emoji\" role=\"img\" aria-label=\"sad\">😖</span></button>\n\n        </div>\n      )\n    } else {\n      document.querySelector('h2').remove()\n\n      return (\n        <div className=\"thankyou\">\n            <h3>Thanks for all your help</h3>\n            <img src=\"getFat.gif\" alt=\"get fat\"/>\n            <a href=\"https://yummy-translations.herokuapp.com/\">\n              play again\n            </a>\n        </div>\n      )\n    }\n  }\n}\n\nexport default TestDescriptions\n","import React, { Component } from 'react';\nimport './App.css';\nimport SelectLanguage from './SelectLanguage.js'\nimport TestDescriptions from './TestDescriptions.js'\nimport Airtable from 'airtable'\n\n\n// sneaky airtable api key in hidden environment variable\nlet API_KEY = process.env.REACT_APP_AIRTABLE_API_KEY\nAirtable.configure({apiKey: API_KEY, endpointUrl: 'https://api.airtable.com'})\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      numberOfDesc: 10,\n      descriptions: [],\n      source: 'en',\n      target: '',\n      ready: false,\n      languages: [\n        {\n          language: '🇫🇷 French',\n          code: 'fr'\n        },\n        {\n          language: '🇨🇳 Mandarin',\n          code: 'ma'\n        },\n        {\n          language: '🇬🇷 Greek',\n          code: 'el'\n        },\n        {\n          language: '🇯🇵 Japanese',\n          code: 'ja'\n        },\n        {\n          language: '🇮🇳 Hindi',\n          code: 'hi'\n        },\n        {\n          language: '🇨🇳 Cantonese',\n          code: 'cn'\n        },\n        {\n          language: '🇰🇷 Korean',\n          code: 'ko'\n        },\n        {\n          language: '🇩🇪 German',\n          code: 'de'\n        },\n        {\n          language: '🇮🇩 Indonesian',\n          code: 'id'\n        },\n        {\n          language: '🇨🇳 Chinese - Simplified',\n          code: 'zh-CN'\n        },\n        {\n          language: '🇨🇳 Chinese - Traditional',\n          code: 'zh-TW'\n        },\n        {\n          language: '🇪🇸 Spanish',\n          code: 'es'\n        },\n        {\n          language: '🇷🇺 Russian',\n          code: 'ru'\n        }\n      ]\n    }\n\n    this.setLanguage = this.setLanguage.bind(this)\n    this.selectRandomDescriptions = this.selectRandomDescriptions.bind(this)\n  }\n\n  componentWillMount() {\n    this.selectRandomDescriptions()\n  }\n\n  setLanguage(code) {\n    this.setState({\n      target: code\n    }, () => {\n      // console.log(this.state.target)\n    })\n  }\n\n  printLanguage(code) {\n    let index = this.state.languages.findIndex(l => l.code === code)\n    return this.state.languages[index].language\n  }\n\n  selectRandomDescriptions() {\n    let self = this\n    let descriptions = []\n    let base = Airtable.base('apptSqpNwahy0x0YK');\n    base('Database').select({\n      view: \"Grid view\",\n      // filterByFormula: `NOT(Definition = BLANK()) = 1`\n    }).eachPage(function page(records, fetchNextPage) {\n\n      records.forEach(function(record) {\n        descriptions.push(record.get('Item Description'))\n      });\n\n      fetchNextPage();\n\n    }, function done(err) {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      self.setState({\n        ready: true\n      }, () => { console.log('ready? ' + self.state.ready)})\n      self.selectRandom(descriptions, self.state.numberOfDesc)\n    })\n  }\n\n  selectRandom(descs, num) {\n    let randoms = []\n    let i = 0\n    while (i < num) {\n      let rand = descs[Math.floor(Math.random() * descs.length)]\n      if (rand !== undefined && randoms.indexOf(rand) === -1) {\n        randoms.push(rand)\n        i++\n      }\n    }\n    this.setState({\n      descriptions: randoms\n    }, () => {\n      // console.log(this.state.descriptions)\n    })\n  }\n\n  render() {\n    let noLanguage = true\n    document.querySelector('body').classList.add('purple')\n    if (this.state.target !== '') {\n      noLanguage = false\n      document.querySelector('body').classList.remove('purple')\n      document.querySelector('body').classList.add('purpink')\n    }\n    let ready = this.state.ready\n\n    return (\n      <div className=\"App\">\n\n        <header>\n          <h1>Yummy translations</h1>\n        </header>\n\n        { noLanguage ?\n          <section>\n            { ready ?\n              <div>\n                <span className=\"selectHead\">Select your language</span>\n                <SelectLanguage\n                  target={ this.state.target }\n                  languages={ this.state.languages }\n                  onSetLang={ this.setLanguage }\n                />\n              </div>\n              :\n              <div className=\"helpingHand\">\n                <h3>Thanks for giving us a HELPING HAND</h3>\n                <img src=\"helpinghand.gif\" alt=\"helping hand\"/>\n              </div>\n            }\n          </section>\n          :\n          <section>\n            <h2>{ this.printLanguage(this.state.target) }</h2>\n            <TestDescriptions\n              target={ this.state.target }\n              descriptions={ this.state.descriptions }\n             />\n          </section>\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}